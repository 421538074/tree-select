{"version":3,"sources":["webpack:///./examples/dynamic.js"],"names":["Demo","state","treeData","label","value","key","isLeaf","onChange","console","log","setState","onLoadData","treeNode","Promise","resolve","setTimeout","getNewTreeData","props","eventKey","generateTreeNodes","padding","width","React","Component","propTypes","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;;IAEMA,I;;;;;;;;;;;;;;+OAGJC,K,GAAQ;AACNC,gBAAU,CACR,EAAEC,OAAO,UAAT,EAAqBC,OAAO,KAA5B,EAAmCC,KAAK,KAAxC,EADQ,EAER,EAAEF,OAAO,UAAT,EAAqBC,OAAO,KAA5B,EAAmCC,KAAK,KAAxC,EAFQ,EAGR,EAAEF,OAAO,UAAT,EAAqBC,OAAO,KAA5B,EAAmCC,KAAK,KAAxC,EAA+CC,QAAQ,IAAvD,EAHQ,CADJ;AAMN;AACAF,aAAO,EAAEA,OAAO,aAAT,EAAwBD,OAAO,aAA/B;AAPD,K,QAURI,Q,GAAW,UAACH,KAAD,EAAW;AACpBI,cAAQC,GAAR,CAAYL,KAAZ;AACA,YAAKM,QAAL,CAAc;AACZN;AADY,OAAd;AAGD,K,QAEDO,U,GAAa,UAACC,QAAD,EAAc;AACzBJ,cAAQC,GAAR,CAAYG,QAAZ;AACA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,mBAAW,YAAM;AACf,cAAMb,qBAAA,+EAAAA,CAAe,MAAKD,KAAL,CAAWC,QAA1B,EAAN;AACAc,UAAA,oFAAAA,CAAed,QAAf,EAAyBU,SAASK,KAAT,CAAeC,QAAxC,EAAkD,uFAAAC,CAAkBP,QAAlB,CAAlD,EAA+E,CAA/E;AACA,gBAAKF,QAAL,CAAc,EAAER,kBAAF,EAAd;AACAY;AACD,SALD,EAKG,GALH;AAMD,OAPM,CAAP;AAQD,K;;;;;6BAEQ;AACP,aACE;AAAA;AAAA,UAAK,OAAO,EAAEM,SAAS,WAAX,EAAZ;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE,oEAAC,+DAAD;AACE,iBAAO,EAAEC,OAAO,GAAT,EADT;AAEE,oBAAU,KAAKpB,KAAL,CAAWC,QAFvB;AAGE,4BAHF;AAIE,iBAAO,KAAKD,KAAL,CAAWG,KAJpB;AAKE,oBAAU,KAAKG,QALjB;AAME,oBAAU,KAAKI;AANjB;AAFF,OADF;AAaD;;;;EA9CgB,6CAAAW,CAAMC,S;;AAAnBvB,I,CACGwB,S,GAAY,E;;;AAgDrB,iDAAAC,CAASC,MAAT,CAAgB,4DAAC,IAAD,OAAhB,EAA0BC,SAASC,cAAT,CAAwB,iBAAxB,CAA1B,E","file":"dynamic.js","sourcesContent":["/* eslint react/no-multi-comp:0, no-console:0 */\n\nimport 'rc-tree-select/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TreeSelect from 'rc-tree-select';\nimport { getNewTreeData, generateTreeNodes } from './util';\n\nclass Demo extends React.Component {\n  static propTypes = {};\n\n  state = {\n    treeData: [\n      { label: 'pNode 01', value: '0-0', key: '0-0' },\n      { label: 'pNode 02', value: '0-1', key: '0-1' },\n      { label: 'pNode 03', value: '0-2', key: '0-2', isLeaf: true },\n    ],\n    // value: '0-0',\n    value: { value: '0-0-0-value', label: '0-0-0-label' },\n  };\n\n  onChange = (value) => {\n    console.log(value);\n    this.setState({\n      value,\n    });\n  };\n\n  onLoadData = (treeNode) => {\n    console.log(treeNode);\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\n        this.setState({ treeData });\n        resolve();\n      }, 500);\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ padding: '10px 30px' }}>\n        <h2>dynamic render</h2>\n        <TreeSelect\n          style={{ width: 300 }}\n          treeData={this.state.treeData}\n          labelInValue\n          value={this.state.value}\n          onChange={this.onChange}\n          loadData={this.onLoadData}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/dynamic.js"],"sourceRoot":""}