{"version":3,"sources":["webpack:///./examples/dynamic.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;qMANA;;AAQA,KAAM,OAAO,gBAAM,WAAN,CAAkB;AAAA;;AAC7B,cAAW,EADkB;AAE7B,kBAF6B,6BAEX;AAChB,YAAO;AACL,iBAAU,CACR,EAAE,OAAO,UAAT,EAAqB,OAAO,KAA5B,EAAmC,KAAK,KAAxC,EADQ,EAER,EAAE,OAAO,UAAT,EAAqB,OAAO,KAA5B,EAAmC,KAAK,KAAxC,EAFQ,EAGR,EAAE,OAAO,UAAT,EAAqB,OAAO,KAA5B,EAAmC,KAAK,KAAxC,EAA+C,QAAQ,IAAvD,EAHQ,CADL;AAML;AACA,cAAO,EAAE,OAAO,aAAT,EAAwB,OAAO,aAA/B;AAPF,MAAP;AASD,IAZ4B;AAa7B,WAb6B,oBAapB,KAboB,EAab;AACd,aAAQ,GAAR,CAAY,KAAZ;AACA,UAAK,QAAL,CAAc;AACZ;AADY,MAAd;AAGD,IAlB4B;AAmB7B,aAnB6B,sBAmBlB,QAnBkB,EAmBR;AAAA;;AACnB,aAAQ,GAAR,CAAY,QAAZ;AACA,YAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,kBAAW,YAAM;AACf,aAAM,wCAAe,MAAK,KAAL,CAAW,QAA1B,EAAN;AACA,mCAAe,QAAf,EAAyB,SAAS,KAAT,CAAe,QAAxC,EAAkD,6BAAkB,QAAlB,CAAlD,EAA+E,CAA/E;AACA,eAAK,QAAL,CAAc,EAAE,kBAAF,EAAd;AACA;AACD,QALD,EAKG,GALH;AAMD,MAPM,CAAP;AAQD,IA7B4B;AA8B7B,SA9B6B,oBA8BpB;AACP,YACE;AAAA;AAAA,SAAK,OAAO,EAAE,SAAS,WAAX,EAAZ;AACE;AAAA;AAAA;AAAA;AAAA,QADF;AAEE;AACE,gBAAO,EAAE,OAAO,GAAT,EADT;AAEE,mBAAU,KAAK,KAAL,CAAW,QAFvB;AAGE,2BAHF;AAIE,gBAAO,KAAK,KAAL,CAAW,KAJpB;AAKE,mBAAU,KAAK,QALjB;AAME,mBAAU,KAAK;AANjB;AAFF,MADF;AAaD;AA5C4B,EAAlB,CAAb;;AA+CA,oBAAS,MAAT,CAAgB,8BAAC,IAAD,OAAhB,EAA0B,SAAS,cAAT,CAAwB,iBAAxB,CAA1B,E","file":"dynamic.js","sourcesContent":["/* eslint react/no-multi-comp:0, no-console:0 */\n\nimport 'rc-tree-select/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TreeSelect from 'rc-tree-select';\nimport { getNewTreeData, generateTreeNodes } from './util';\n\nconst Demo = React.createClass({\n  propTypes: {},\n  getInitialState() {\n    return {\n      treeData: [\n        { label: 'pNode 01', value: '0-0', key: '0-0' },\n        { label: 'pNode 02', value: '0-1', key: '0-1' },\n        { label: 'pNode 03', value: '0-2', key: '0-2', isLeaf: true },\n      ],\n      // value: '0-0',\n      value: { value: '0-0-0-value', label: '0-0-0-label' },\n    };\n  },\n  onChange(value) {\n    console.log(value);\n    this.setState({\n      value,\n    });\n  },\n  onLoadData(treeNode) {\n    console.log(treeNode);\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const treeData = [...this.state.treeData];\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\n        this.setState({ treeData });\n        resolve();\n      }, 500);\n    });\n  },\n  render() {\n    return (\n      <div style={{ padding: '10px 30px' }}>\n        <h2>dynamic render</h2>\n        <TreeSelect\n          style={{ width: 300 }}\n          treeData={this.state.treeData}\n          labelInValue\n          value={this.state.value}\n          onChange={this.onChange}\n          loadData={this.onLoadData}\n        />\n      </div>\n    );\n  },\n});\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n/** WEBPACK FOOTER **\n ** ./examples/dynamic.js\n **/"],"sourceRoot":""}